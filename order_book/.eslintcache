[{"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\index.js":"1","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\App.js":"2","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\reportWebVitals.js":"3","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\BookColumn.js":"4","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\TradingViewWidget.js":"5","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\SelectCurrency.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":4988,"mtime":1606951481090,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":643,"mtime":1606950390740,"results":"11","hashOfConfig":"8"},{"size":360,"mtime":1606934638174,"results":"12","hashOfConfig":"8"},{"size":2307,"mtime":1606953756502,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"yqu4im",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\index.js",[],["28","29"],"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\App.js",["30","31","32","33"],"import BookColumn from './components/BookColumn';\nimport React, { useState, useEffect, useRef } from'react';\nimport './css/App.css';\nimport TradingViewWidget from './components/TradingViewWidget';\nimport SelectCurrency from './components/SelectCurrency';\n\n\n\n/**\n * Main app interface\n */\nexport default function App() {\n  const ws = new useRef(null);\n  const [bidData, setBidData] = useState([]);\n  const [askData, setAskData] = useState([]);\n  const [tool, setTool] = useState(\"\");\n  let asks = [];\n  let bids = [];\n  \n  const [currencyPair, setCurrencyPair] = useState(\"ETH-USD\");\n\n  /**\n   * Sets new currency for the app\n   * @param {String} newCurrency is the new currency\n   */\n  const setCurrency = (newCurrency) => {\n    setCurrencyPair(newCurrency);\n  }\n  \n  /**\n   * Open the connection to the web socket\n   */\n  useEffect(() => {\n    ws.current = new WebSocket('wss://ws-feed.pro.coinbase.com');\n    ws.current.onclose = () => {\n      console.log(\"CLOSING\");\n    }\n    return () => { //Close on cleanup. Empty arrays for next change.\n      ws.current.close();\n      asks = [];\n      bids = [];\n      setBidData([]);\n      setAskData([]);\n    }\n  }, [ws, currencyPair]);\n\n  /**\n   * Maintain the bid and ask price lists\n   */\n  useEffect(() => {\n    ws.current.onopen = () => {\n      ws.current.send(JSON.stringify({\n        type: 'subscribe',\n        product_ids: [\n            currencyPair,\n        ],\n        channels: [\n            'level2',\n        ],\n    }));\n    }\n\n    \n    /**\n     * Parses message data into order book\n     * @param {JSON} e is the JSON respose from the websocket. The data we want is located in e.data\n     */\n    ws.current.onmessage = (e) => {\n      let parsedMsg = JSON.parse(e.data);\n\n      //Deep copy\n      asks = askData.slice();\n      bids = bidData.slice();\n\n      if(parsedMsg.type === \"snapshot\") { //Build initial orderbook\n        for(let ask of parsedMsg.asks) {\n            asks[asks.length] = {\n                price: Number(ask[0]),\n                quantity: Number(ask[1]),\n            };\n        }\n\n        for(let bid of parsedMsg.bids) {\n            bids[bids.length] = {\n                price: Number(bid[0]),\n                quantity: Number(bid[1]),\n            };\n        }\n    } else if (parsedMsg.type === \"l2update\") {\n        if(parsedMsg.changes[0][0] === \"buy\") { //Update bid prices\n            let bidPriceAffected = Number(parsedMsg.changes[0][1]);\n            let newBidQuantity = Number(parsedMsg.changes[0][2]);\n            for(let i = 0; i < bids.length; i++) {\n                if(bids[i].price === bidPriceAffected && newBidQuantity === 0) { //Eliminate a price\n\n                    bids.splice(i, 1);\n                    break;\n                } else if (bids[i].price === bidPriceAffected && newBidQuantity !== 0) { //Update a price\n\n                    bids[i].quantity = newBidQuantity;\n                    break;\n                } else if (bidPriceAffected > bids[i].price && newBidQuantity !== 0) { //Insert a price\n                    bids.splice(i, 0, {\n                        price: bidPriceAffected,\n                        quantity: newBidQuantity,\n                    });\n                    break;\n                }\n            }\n        } else if (parsedMsg.changes[0][0] === \"sell\") { //Update ask prices\n            let askPriceAffected = Number(parsedMsg.changes[0][1]);\n            let newAskQuantity = Number(parsedMsg.changes[0][2]);\n            for(let i = 0; i < asks.length; i++) {\n                if(asks[i].price === askPriceAffected && newAskQuantity === 0) { //Eliminate a price\n                    asks.splice(i, 1);\n                    break;\n                } else if (asks[i].price === askPriceAffected && newAskQuantity !== 0) { //Update a price\n                    asks[i].quantity = newAskQuantity;\n                    break;\n                } else if (askPriceAffected < asks[i].price && newAskQuantity !== 0) { //Insert a price\n                    asks.splice(i, 0, {\n                        price: askPriceAffected,\n                        quantity: newAskQuantity,\n                    });\n                    break;\n                }\n            }\n        }\n      }\n      setBidData(bids);\n      setAskData(asks);\n      \n      setTool(\"\"); //Re-render\n    }\n  }, [tool,asks,bids,ws]);\n\n  return (\n    <div className=\"App\">\n      <h1 className = \"Title\">Order Book { currencyPair }</h1>\n      <div>\n        <SelectCurrency setCurrency = { setCurrency } />\n      </div>\n      <div className = \"Columns\">\n        <div className = \"LeftColumn\">\n          <BookColumn title = \"Bids\" color = 'white' list = { bidData.slice(0,10) } />\n        </div>\n        <div className = \"RightColumn\">\n          <BookColumn title = \"Asks\" color = 'white' list = { askData.slice(0,10) } />\n        </div>\n      </div>\n      <div className = \"Chart\">\n        <TradingViewWidget symbol = {\"COINBASE:\" + currencyPair.split('-')[0] + currencyPair.split('-')[1]} />\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\reportWebVitals.js",[],"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\BookColumn.js",[],"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\TradingViewWidget.js",[],"C:\\Users\\Patron\\Documents\\Apps\\order_book_viewer\\order_book\\src\\components\\SelectCurrency.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":14,"nodeType":"40","endLine":40,"endColumn":16},{"ruleId":"38","severity":1,"message":"41","line":41,"column":14,"nodeType":"40","endLine":41,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":72,"column":14,"nodeType":"42","endLine":72,"endColumn":29},{"ruleId":"38","severity":1,"message":"41","line":73,"column":14,"nodeType":"42","endLine":73,"endColumn":29},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","Assignments to the 'asks' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","Assignments to the 'bids' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation"]